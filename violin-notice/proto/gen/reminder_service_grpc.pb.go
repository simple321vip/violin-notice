// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: reminder_service.proto

package reminder_service_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReminderServiceClient is the client API for ReminderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReminderServiceClient interface {
	CreateReminder(ctx context.Context, in *ReminderMessage, opts ...grpc.CallOption) (*ReminderResponse, error)
	UpdateReminder(ctx context.Context, in *ReminderMessage, opts ...grpc.CallOption) (*ReminderResponse, error)
	DeleteReminder(ctx context.Context, in *ReminderMessage, opts ...grpc.CallOption) (*ReminderResponse, error)
	SelectReminder(ctx context.Context, in *ReminderMessage, opts ...grpc.CallOption) (*SelectReminderResponse, error)
}

type reminderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReminderServiceClient(cc grpc.ClientConnInterface) ReminderServiceClient {
	return &reminderServiceClient{cc}
}

func (c *reminderServiceClient) CreateReminder(ctx context.Context, in *ReminderMessage, opts ...grpc.CallOption) (*ReminderResponse, error) {
	out := new(ReminderResponse)
	err := c.cc.Invoke(ctx, "/notice.service.v1.ReminderService/CreateReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) UpdateReminder(ctx context.Context, in *ReminderMessage, opts ...grpc.CallOption) (*ReminderResponse, error) {
	out := new(ReminderResponse)
	err := c.cc.Invoke(ctx, "/notice.service.v1.ReminderService/UpdateReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) DeleteReminder(ctx context.Context, in *ReminderMessage, opts ...grpc.CallOption) (*ReminderResponse, error) {
	out := new(ReminderResponse)
	err := c.cc.Invoke(ctx, "/notice.service.v1.ReminderService/DeleteReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) SelectReminder(ctx context.Context, in *ReminderMessage, opts ...grpc.CallOption) (*SelectReminderResponse, error) {
	out := new(SelectReminderResponse)
	err := c.cc.Invoke(ctx, "/notice.service.v1.ReminderService/SelectReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReminderServiceServer is the server API for ReminderService service.
// All implementations must embed UnimplementedReminderServiceServer
// for forward compatibility
type ReminderServiceServer interface {
	CreateReminder(context.Context, *ReminderMessage) (*ReminderResponse, error)
	UpdateReminder(context.Context, *ReminderMessage) (*ReminderResponse, error)
	DeleteReminder(context.Context, *ReminderMessage) (*ReminderResponse, error)
	SelectReminder(context.Context, *ReminderMessage) (*SelectReminderResponse, error)
	mustEmbedUnimplementedReminderServiceServer()
}

// UnimplementedReminderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReminderServiceServer struct {
}

func (UnimplementedReminderServiceServer) CreateReminder(context.Context, *ReminderMessage) (*ReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReminder not implemented")
}
func (UnimplementedReminderServiceServer) UpdateReminder(context.Context, *ReminderMessage) (*ReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReminder not implemented")
}
func (UnimplementedReminderServiceServer) DeleteReminder(context.Context, *ReminderMessage) (*ReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReminder not implemented")
}
func (UnimplementedReminderServiceServer) SelectReminder(context.Context, *ReminderMessage) (*SelectReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectReminder not implemented")
}
func (UnimplementedReminderServiceServer) mustEmbedUnimplementedReminderServiceServer() {}

// UnsafeReminderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReminderServiceServer will
// result in compilation errors.
type UnsafeReminderServiceServer interface {
	mustEmbedUnimplementedReminderServiceServer()
}

func RegisterReminderServiceServer(s grpc.ServiceRegistrar, srv ReminderServiceServer) {
	s.RegisterService(&ReminderService_ServiceDesc, srv)
}

func _ReminderService_CreateReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReminderMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).CreateReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.service.v1.ReminderService/CreateReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).CreateReminder(ctx, req.(*ReminderMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_UpdateReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReminderMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).UpdateReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.service.v1.ReminderService/UpdateReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).UpdateReminder(ctx, req.(*ReminderMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_DeleteReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReminderMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).DeleteReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.service.v1.ReminderService/DeleteReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).DeleteReminder(ctx, req.(*ReminderMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_SelectReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReminderMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).SelectReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notice.service.v1.ReminderService/SelectReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).SelectReminder(ctx, req.(*ReminderMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ReminderService_ServiceDesc is the grpc.ServiceDesc for ReminderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReminderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notice.service.v1.ReminderService",
	HandlerType: (*ReminderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReminder",
			Handler:    _ReminderService_CreateReminder_Handler,
		},
		{
			MethodName: "UpdateReminder",
			Handler:    _ReminderService_UpdateReminder_Handler,
		},
		{
			MethodName: "DeleteReminder",
			Handler:    _ReminderService_DeleteReminder_Handler,
		},
		{
			MethodName: "SelectReminder",
			Handler:    _ReminderService_SelectReminder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reminder_service.proto",
}
